package jp.example;

import static jp.example.SingleTierController.*;
import static org.apache.commons.lang3.StringUtils.*;

import java.util.List;

import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.beanutils.BeanUtils;

import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.SneakyThrows;
import lombok.extern.slf4j.Slf4j;

/**
 * Servlet JSP CRUD サンプルクラスです。
 * @author Generated by Pleiades All in One New Gradle Project Wizard (EPL)
 */
@WebServlet("")
@Slf4j
public class CrudServlet extends HttpServlet {
	
	/** item エンティティクラス */
	@Data @NoArgsConstructor
	public static class Item {
		@SneakyThrows
		public Item(HttpServletRequest req) {
			BeanUtils.copyProperties(this, req.getParameterMap());
		}
		public Item validate(HttpServletRequest req) {
			req.setAttribute("item", this);
			valid(name.matches("[^<>]+"), "製品名に <> は使用できません。");
			valid(!(name.matches("(?i).*iphone.*") && !faceAuth), "iPhone は顔認証を有効にしてください。");
			valid(!releaseDate.endsWith("15"), "発売日は 15 日以外の日付を入力してください。");
			return this;
		}
		public long id;
		public String name;
		public String releaseDate;
		public boolean faceAuth;
	}
	
	/** CRUD の R: Read (SELECT) 検索して一覧画面を表示 */
	@Override @SneakyThrows
	protected void doGet(HttpServletRequest req, HttpServletResponse res) {
		
		// TODO 2waySQL で条件書く
		List<Item> list = dao().queryWith("""
				SELECT * FROM item
				 WHERE (COALESCE(/*name*/, '') = '' OR name LIKE /*SF.contains(name)*/ escape /*#ESC_CHAR*/'$') 
				   AND (COALESCE(/*releaseDate*/,'') = '' OR release_date = /*releaseDate*/)
			""").paramBean(new Item(req)).collect(Item.class);
		
		log.debug("SELECT 結果 {} 件 : {}", list.size(), list);
		req.getSession().setAttribute("searchPath", req.getRequestURI() + "?" + defaultString(req.getQueryString()));
		req.setAttribute("itemList", list);
		req.getRequestDispatcher("/WEB-INF/list.jsp").forward(req, res);
	}

	/** CRUD の C: Create (INSERT) 登録サーブレット */
	@WebServlet("/create")
	public static class CreateServlet extends HttpServlet {
		
		/** 一覧画面の新規登録ボタン → 登録画面の表示 */
		@Override @SneakyThrows
		protected void doGet(HttpServletRequest req, HttpServletResponse res) {
			req.getRequestDispatcher("/WEB-INF/detail.jsp").forward(req, res);
		}
		
		/** 登録画面の登録ボタン → 一覧画面へリダイレクト (PRG パターン) */
		@Override @SneakyThrows
		protected void doPost(HttpServletRequest req, HttpServletResponse res) {
			dao().insert(new Item(req).validate(req));
			req.setAttribute("message", "登録しました。");
			res.sendRedirect((String) req.getSession().getAttribute("searchPath"));
		}
	}

	/** CRUD の U: Update (UPDATE) 変更サーブレット */
	@WebServlet("/update")
	public static class UpdateServlet extends HttpServlet {
		
		/** 一覧画面の変更ボタン → 変更画面の表示 */
		@Override @SneakyThrows
		protected void doGet(HttpServletRequest req, HttpServletResponse res) {
			Item item = dao().find(Item.class, new Item(req).id).orElseThrow();
			req.setAttribute("item", item);
			req.getRequestDispatcher("/WEB-INF/detail.jsp").forward(req, res);
		}
		
		/** 変更画面の更新ボタン → 一覧画面へリダイレクト (PRG パターン) */
		@Override @SneakyThrows
		protected void doPost(HttpServletRequest req, HttpServletResponse res) {
			dao().update(new Item(req).validate(req));
			req.setAttribute("message", "更新しました。");
			res.sendRedirect((String) req.getSession().getAttribute("searchPath"));
		}
	}

	/** CRUD の D: Delete (DELETE) 削除サーブレット */
	@WebServlet("/delete")
	public static class DeleteServlet extends HttpServlet {
		
		/** 一覧画面の削除ボタン → 一覧画面へリダイレクト (F5 対策のリダイレクト) */
		@Override @SneakyThrows
		protected void doGet(HttpServletRequest req, HttpServletResponse res) {
			dao().delete(new Item(req));
			req.setAttribute("message", "削除しました。");
			res.sendRedirect((String) req.getSession().getAttribute("searchPath"));
		}
	}
}
